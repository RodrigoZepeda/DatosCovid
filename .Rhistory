#
# #Muestras con un positivo especifico
# ps %>%
#   filter(str_detect(C1,"1")) %>%
#   tally()
#
# #choose(4,1)*choose(5,2)
#
# #Muestras con al menos un positivo en la primera pero no en la segunda
# # + muestras sin positivo en la 1a ni la 2a
# ps %>%
#   filter(str_detect(C1,"1|3") & !str_detect(C2,"1|3")) %>%
#   tally()
#
#
#
#
#
#
# #Supongamos que estos son los positivos. Quitamos entonces aquellos donde
# #al inicio hay positivos
# positivos <- c()
# for (i in 1:length(pop)){
#   if (sample(c(TRUE, FALSE), 1, prob = c(p[1], 1 - p[1]))){
#     positivos <- c(positivos, i)
#   }
# }
#
# if (length(positivos) == 0){
#   message("Por ahora no tienes positivos")
# }
#
# for (positivo in positivos){
#   c1 <- paste0(paste0("\\b", as.character(positivo),"_"),"|",
#                paste0("_", as.character(positivo),"_"),"|",
#                paste0("_", as.character(positivo),"\\b"))
#   c2 <- paste0(paste0("\\b", as.character(positivo),"-"), "|",
#                paste0("-", as.character(positivo),"-"),"|",
#                paste0("-", as.character(positivo),"\\b"))
#   ps <- ps %>%
#     filter(!(str_detect(C1, c1) & str_detect(C2, c2)))
# }
#
# probpos <- length(positivos)/N
#
# #P(Xi in S y No +)
# nopos <- paste0(paste0("\\b", as.character(max(pop[-positivos])),"_"),"|",
#                 paste0("_",   as.character(max(pop[-positivos])),"_"),"|",
#                 paste0("_",   as.character(max(pop[-positivos])),"\\b"),"|",
#                 paste0("\\b", as.character(max(pop[-positivos])),"-"),"|",
#                 paste0("-",   as.character(max(pop[-positivos])),"-"),"|",
#                 paste0("-",   as.character(max(pop[-positivos])),"\\b"))
# ps %>%
#   filter(str_detect(C2, nopos)) %>%
#   tally() %>% as.numeric() / nrow(ps)
#
# #P(Xi in S | +)
# #P(Xi in S y No +)
# pos <- paste0(paste0("\\b", as.character(positivos[1]),"_"),"|",
#                 paste0("_",   as.character(positivos[1]),"_"),"|",
#                 paste0("_",   as.character(positivos[1]),"\\b"),"|",
#                 paste0("\\b", as.character(positivos[1]),"-"),"|",
#                 paste0("-",   as.character(positivos[1]),"-"),"|",
#                 paste0("-",   as.character(positivos[1]),"\\b"))
# ps %>%
#   filter(str_detect(C2, as.character(positivos[1]))) %>%
#   tally() %>% as.numeric() / nrow(ps)
#
# #P(Xi in S | No Ciclo 1 y +)
# ps %>%
#   filter(str_detect(C2, pos) & !str_detect(C1, pos)) %>%
#   tally() %>% as.numeric() /
# ps %>%
#   filter(!str_detect(C1, pos)) %>%
#   tally() %>% as.numeric()
#
# weight_estimate("positive", FALSE, N = N, n = n, total_positive = length(positivos), parallel = T)
#
#
# #P(Xi in S | No Ciclo 1 y -)
# ps %>%
#   filter(str_detect(C2, nopos) & !str_detect(C1, nopos)) %>%
#   tally() %>% as.numeric() /
#   ps %>%
#   filter(!str_detect(C1, nopos)) %>%
#   tally() %>% as.numeric()
#
# weight_estimate("negative", FALSE, N = N, n = n, total_positive = length(positivos), parallel = T)
#
# #P(Xi in S | Ciclo 1 y +)
# ps %>%
#   filter(str_detect(C2, pos) & str_detect(C1, pos)) %>%
#   tally() %>% as.numeric() /
#   ps %>%
#   filter(str_detect(C2, pos)) %>%
#   tally() %>% as.numeric()
#
# weight_estimate("positive", TRUE, N = N, n = n, total_positive = length(positivos), parallel = T)
#
# #P(Xi in S | Ciclo 1 y -)
# ps %>%
#   filter(str_detect(C2, nopos) & str_detect(C1, nopos)) %>%
#   tally() %>% as.numeric() /
#   ps %>%
#   filter(str_detect(C1, nopos)) %>%
#   tally() %>% as.numeric()
#
# weight_estimate("negative", TRUE, N = N, n = n, total_positive = length(positivos), parallel = T)
#
# #En teoría
# #P(Xi in S | ¬Ciclo 1)
# ps %>%
#   filter(str_detect(C2, nopos) & !str_detect(C1, nopos)) %>%
#   tally() %>% as.numeric() /
#   ps %>%
#   filter(!str_detect(C1, nopos)) %>%
#   tally() %>% as.numeric()
#
# ps %>%
#   filter(str_detect(C2, pos) & !str_detect(C1, pos)) %>%
#   tally() %>% as.numeric() /
#   ps %>%
#   filter(!str_detect(C1, pos)) %>%
#   tally() %>% as.numeric()
#
# #Forma de calcular nrow ps:
# positivos_pob <- length(positivos)
# psize         <- 0
# for (i in 0:positivos_pob){
#   psize <- (choose(N - positivos_pob, n - i) *
#               choose(positivos_pob, i)*choose(N - i, n)) + psize
# }
#
# psize == nrow(ps)
#
# #P(Xi in Ciclo 1)
# ps %>%
#   filter(str_detect(C1, nopos)) %>%
#   tally() %>% as.numeric() /
#   nrow(ps)
#
# #Forma de calcular nrow ps:
# positivos_pob <- length(positivos)
# psize         <- 0
# for (i in 0:positivos_pob){
#   psize <- (choose(N - positivos_pob, n - i) *
#               choose(positivos_pob, i)*choose(N - i, n)) + psize
# } #Condicional de no estar en ciclo 1 siendo positivo
#
# #Forma de calcular NEGATIVOS en ciclo 2 y no en 1: 0.8939394
# psize         <- 0
# for (i in 0:positivos_pob){
#   psize <- (choose(N - positivos_pob - 1, n - i) *
#               choose(positivos_pob, i)*choose(N - i, n)) + psize
# }
#
# qsize         <- 0
# for (i in 0:positivos_pob){
#   qsize <- (choose(N - positivos_pob - 1, n - i) *
#               choose(positivos_pob, i)*choose(N - i - 1, n - 1)) + qsize
# }
# qsize/psize
#
# #Forma de calcular POSITIVOS en ciclo 2 y no en 1: 0.8939394
# psize         <- 0
# for (i in 0:(positivos_pob - 1)){
#   psize <- (choose(N - positivos_pob, n - i) *
#               choose(positivos_pob - 1, i)*choose(N - i, n)) + psize
# }
#
# qsize         <- 0
# for (i in 0:(positivos_pob - 1)){
#   qsize <- (choose(N - positivos_pob, n - i) *
#               choose(positivos_pob - 1, i)*choose(N - i - 1, n - 1)) + qsize
# }
# qsize/psize
#
#
# #Forma de calcular NEGA en ciclo 2 y en 1: 0.8939394
# psize         <- 0
# for (i in 0:positivos_pob){
#   psize <- (choose(N - 1 - positivos_pob, n - 1 - i) *
#               choose(positivos_pob, i)*choose(N - i, n)) + psize
# }
#
# qsize         <- 0
# for (i in 0:positivos_pob){
#   qsize <- (choose(N - 1 - positivos_pob, n - 1 - i) *
#               choose(positivos_pob, i)*choose(N - i - 1, n - 1)) + qsize
# }
# qsize/psize
#
message("done")
beepr::beep(10)
update.packages(ask = F)
download_method           = "curl"
file_download_data        = tempfile()
file_download_dictionary  = tempfile()
remove_zip_after_download = TRUE
quiet                     = FALSE
parse_dictionary          = TRUE
parse_warnings            = FALSE
language                  = c("English", "Espa\u00f1ol")
read_format               = c("MariaDB","tibble")
user                      = Sys.getenv("MariaDB_user")
user
password                  = Sys.getenv("MariaDB_password")
dbname                    = Sys.getenv("MariaDB_dbname")
host                      = Sys.getenv("MariaDB_host")
group                     = Sys.getenv("MariaDB_group")
port                      = Sys.getenv("MariaDB_port")
tblname                   = "covidmx"
#Check inputs----
if (stringr::str_detect(toupper(language[1]),"ESPA.*OL")){
language <- "Espa\u00f1ol"
} else {
language <- language[1]
}
if (read_format[1] %in% c("MariaDB","tibble")){
read_format <- read_format[1]
} else {
if (language == "English"){
stop("Invalid format select MariaDB or tibble")
} else {
stop("Formato invalido. Selecciona MariaDB o tibble")
}
}
if (!quiet){
if (language == "Espa\u00f1ol"){
message("Por favor se paciente todo el proceso toma aprox 20 minutos.")
} else {
message("Please be patient, the whole process takes aprox 20 minutes.")
}
}
#Download dataset----
site.covid <- paste0(
"http://datosabiertos.salud.gob.mx/gobmx/salud",
"/datos_abiertos/datos_abiertos_covid19.zip"
)
if (!quiet) {
if (language == "Espa\u00f1ol"){
message(paste0("Descargando datos de:\n", site.covid))
} else {
message(paste0("Downloading data from:\n", site.covid))
}
}
RCurl::url.exists(site.covid)
download.file(site.covid, file_download_data,
method = download_method,
quiet = quiet
)
filecon <- archive::archive_extract(file_download_data)
Sys.info()["sysname"]
path_7zip                 = "C:\\Program Files\\7-Zip\\7z"
getOption(readr.show_progress)
getOption("readr.show_progress")
library(ghostpdf)
library(ghostpdf)
usethis::use_pkgdown_github_pages()
pkgdown::build_site_github_pages()
pacman::p_load(readr, tidyverse, posterior, lubridate, ggplot2,
rstan, zoo, cmdstanr, viridis, bayestestR)
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
pacman::p_load(readr, tidyverse, posterior, lubridate, ggplot2,
rstan, zoo, cmdstanr, viridis, bayestestR)
pacman::p_load(readr, tidyverse, posterior, lubridate, ggplot2,
rstan, zoo, cmdstanr, viridis, bayestestR)
#DATOS DE https://www.epicov.org/epi3/frontend#62aa9e
#VARIANT SURVEILLANCE
#https://github.com/guillermodeandajauregui/covid19mx-sql/blob/main/data_loader.R
rm(list = ls())
#library(covidmx)
library(tidyverse)
library(lubridate)
library(ggstream)
library(MetBrewer)
library(latexpdf)
library(cowplot)
library(DBI)
library(odbc)
library(RMariaDB)
rm(list = ls())
library(tidyverse)
library(cmdstanr)
library(lubridate)
library(bayesplot)
library(posterior)
library(glue)
library(MetBrewer)
library(ggtext)
#DATOS DE https://www.epicov.org/epi3/frontend#62aa9e
#VARIANT SURVEILLANCE
#https://github.com/guillermodeandajauregui/covid19mx-sql/blob/main/data_loader.R
rm(list = ls())
#library(covidmx)
library(tidyverse)
library(lubridate)
library(ggstream)
library(MetBrewer)
library(ggtext)
library(latexpdf)
library(cowplot)
library(DBI)
library(odbc)
library(RMariaDB)
library(glue)
flag     <- FALSE
nthreads <- parallel::detectCores() - 2
#Get latest tar file
tarfiles <- list.files(pattern = "variant_surveillance_tsv.*.tar", full.names = T)
df       <- file.info(tarfiles)
fname    <- rownames(df)[which.max(df$mtime)]
#! /usr/bin/Rscript
rm(list = ls())
library(rdrop2)
library(magrittr)
library(glue)
library(stringr)
setwd("~/Documents/DescargaDatosAbiertosCovid")
token <- drop_auth()
saveRDS(token, file = "dropbox_token.rds")
#Dropbox
#token <- drop_auth()
#saveRDS(token, file = "dropbox_token.rds")
drop_auth(rdstoken = "dropbox_token.rds")
#Get files
uploaded_files  <- drop_dir("COVID-OSF/Datos Abiertos COVID")
drop_auth()
#! /usr/bin/Rscript
rm(list = ls())
library(rdrop2)
library(magrittr)
library(glue)
library(stringr)
token <- drop_auth()
?drop_auth
token <- drop_auth(cache = F)
saveRDS(token, file = "dropbox_token.rds")
#Dropbox
#token <- drop_auth(cache = F)
#saveRDS(token, file = "dropbox_token.rds")
drop_auth(rdstoken = "dropbox_token.rds")
#Get files
uploaded_files  <- drop_dir("COVID-OSF/Datos Abiertos COVID")
downloaded_data <- list.files(path = "/media/rodrigo/covid/datasets/",
pattern = ".*.zip", full.names = T)
downloaded_data
details <- file.info(downloaded_data)
details
details$mtime
downloaded_data <- list.files(path = "/media/rodrigo/covid/datasets/",
pattern = ".*.zip", full.names = T)
details         <- file.info(downloaded_data)
details         <- details[with(details, order(as.POSIXct(mtime))), ]
downloaded_data <- rownames(details)
for (fname in downloaded_data){
if (!(basename(fname) %in% uploaded_files$name)){
message(glue("Uploading {str_remove_all(basename(fname),'datos_abiertos_covid19_|.zip')}"))
#Upload file
drop_upload(fname, path = "/COVID-OSF/Datos Abiertos COVID",
verbose = FALSE)
message(glue("Success!"))
}
}
#! /usr/bin/Rscript
rm(list = ls())
library(rdrop2)
library(magrittr)
library(glue)
library(stringr)
#Dropbox
#token <- drop_auth(cache = F)
#saveRDS(token, file = "dropbox_token.rds")
drop_auth(rdstoken = "dropbox_token.rds")
#Get files
uploaded_files  <- drop_dir("COVID-OSF/Datos Abiertos COVID")
#Get files and upload newest to oldest
downloaded_data <- list.files(path = "/media/rodrigo/covid/datasets/",
pattern = ".*.zip", full.names = T)
details         <- file.info(downloaded_data)
details         <- details[with(details, order(as.POSIXct(mtime)), decreasing = T), ]
downloaded_data <- rownames(details)
downloaded_data
for (fname in downloaded_data){
if (!(basename(fname) %in% uploaded_files$name)){
message(glue("Uploading {str_remove_all(basename(fname),'datos_abiertos_covid19_|.zip')}"))
#Upload file
drop_upload(fname, path = "/COVID-OSF/Datos Abiertos COVID",
verbose = FALSE)
message(glue("Success!"))
}
}
details
downloaded_data[1]
#Get files
uploaded_files  <- drop_dir("COVID-OSF/Datos Abiertos COVID")
uploaded_files
#Get files and upload newest to oldest
downloaded_data <- list.files(path = "/media/rodrigo/covid/datasets/",
pattern = ".*.zip", full.names = T)
downloaded_data
downloaded_data[1]
details         <- file.info(downloaded_data)
details
details         <- details[with(details, order(as.POSIXct(mtime)), decreasing = T), ]
details
details         <- details[with(details, order(as.POSIXct(mtime)), decreasing = F), ]
details
details         <- file.info(downloaded_data)
details         <- details[with(details, order(as.POSIXct(mtime)), decreasing = F), ]
details
details[1]
rownames(details)[1]
details         <- file.info(downloaded_data)
details$ctime
#Get files and upload newest to oldest
downloaded_data <- list.files(path = "/media/rodrigo/covid/datasets/",
pattern = ".*.zip", full.names = T)
details         <- file.info(downloaded_data)
details         <- details[with(details, order(as.POSIXct(ctime)), decreasing = F), ]
#Get files and upload newest to oldest
downloaded_data <- list.files(path = "/media/rodrigo/covid/datasets/",
pattern = ".*.zip", full.names = T)
details         <- file.info(downloaded_data)
details         <- details[with(details, order(as.POSIXct(ctime)), decreasing = T), ]
downloaded_data <- rownames(details)
downloaded_data[1]
details         <- details[with(details, order(as.POSIXct(ctime)), decreasing = F), ]
downloaded_data <- rownames(details)
downloaded_data[1]
#Get files and upload newest to oldest
downloaded_data <- list.files(path = "/media/rodrigo/covid/datasets/",
pattern = ".*.zip", full.names = T)
details         <- file.info(downloaded_data)
details         <- details[with(details, order(as.POSIXct(ctime)), decreasing = F), ]
downloaded_data <- rownames(details)
downloaded_data[1]
downloaded_data[2]
#Get files and upload newest to oldest
downloaded_data <- list.files(path = "/media/rodrigo/covid/datasets/",
pattern = ".*.zip", full.names = T)
downloaded_data[700]
details         <- file.info(downloaded_data)
View(details)
#Get files and upload newest to oldest
downloaded_data <- list.files(path = "/media/rodrigo/covid/datasets/",
pattern = ".*.zip", full.names = T)
details         <- file.info(downloaded_data)
details         <- details[with(details, order(as.POSIXct(mtime)), decreasing = F), ]
details
details$mtime |> as.POSIXct()
details$mtime |> as.POSIXct() |> max()
#Get files and upload newest to oldest
downloaded_data <- list.files(path = "/media/rodrigo/covid/datasets/",
pattern = ".*.zip", full.names = T)
details         <- file.info(downloaded_data)
details         <- details[with(details, order(as.POSIXct(mtime)), decreasing = T), ]
downloaded_data <- rownames(details)
downloaded_data[1]
#Get files and upload newest to oldest
downloaded_data <- list.files(path = "/media/rodrigo/covid/datasets/",
pattern = ".*.zip", full.names = T)
details         <- file.info(downloaded_data)
details         <- details[with(details, order(as.POSIXct(mtime)), decreasing = T), ]
details
View(details)
#Get files and upload newest to oldest
downloaded_data <- list.files(path = "/media/rodrigo/covid/datasets/",
pattern = ".*.zip", full.names = T)
details         <- file.info(downloaded_data)
details         <- details[with(details, order(as.POSIXct(mtime), decreasing = T)), ]
details
downloaded_data <- rownames(details)
downloaded_data[1]
for (fname in downloaded_data){
if (!(basename(fname) %in% uploaded_files$name)){
message(glue("Uploading {str_remove_all(basename(fname),'datos_abiertos_covid19_|.zip')}"))
#Upload file
drop_upload(fname, path = "/COVID-OSF/Datos Abiertos COVID",
verbose = FALSE)
message(glue("Success!"))
}
}
token <- drop_auth(cache = F)
saveRDS(token, file = "dropbox_token.rds")
#! /usr/bin/Rscript
rm(list = ls())
library(rdrop2)
library(magrittr)
library(glue)
library(stringr)
#Dropbox
#token <- drop_auth(cache = F)
#saveRDS(token, file = "dropbox_token.rds")
drop_auth(rdstoken = "dropbox_token.rds")
#Get files
uploaded_files  <- drop_dir("COVID-OSF/Datos Abiertos COVID")
#Get files and upload newest to oldest
downloaded_data <- list.files(path = "/media/rodrigo/covid/datasets/",
pattern = ".*.zip", full.names = T)
details         <- file.info(downloaded_data)
details         <- details[with(details, order(as.POSIXct(mtime), decreasing = T)), ]
downloaded_data <- rownames(details)
for (fname in downloaded_data){
if (!(basename(fname) %in% uploaded_files$name)){
message(glue("Uploading {str_remove_all(basename(fname),'datos_abiertos_covid19_|.zip')}"))
#Upload file
drop_upload(fname, path = "/COVID-OSF/Datos Abiertos COVID",
verbose = FALSE)
message(glue("Success!"))
}
}
